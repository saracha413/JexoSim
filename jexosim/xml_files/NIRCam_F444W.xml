<root>
    <title> NIRCam_F444W </title>
    <type name="channel configuration"> </type>

<channel name="NIRCam_F444W" comment="NIRCam_F444W">
    <instrument val = "NIRCam"/>

  <transmissions>
      <optical_surface type="internal optics" transmission="__path__/data/JWST/NIRCam/Transmissions/NIRCam_internal_trans.csv"  val="60" units="K" comment=""/>
      <optical_surface type="filter" transmission="__path__/data/JWST/NIRCam/Transmissions/NIRCam_F444W_trans.csv"  val="60" units="K" comment=""/>
      <optical_surface type="grism" transmission="__path__/data/JWST/NIRCam/Transmissions/NIRCam_grism_trans.csv"  val="60" units="K" comment=""/>
      <optical_surface type="?" transmission="__path__/data/JWST/NIRCam/Transmissions/NIRCam_LW_DBS_trans.csv"  val="60" units="K" comment=""/>
  </transmissions>

<emissions>
    <optical_surface no_surfaces = "12" emissivity = "0.03" val = "40.0" units="K" comment="number of channel surfaces and temp https://www.researchgate.net/figure/Layout-of-one-NIRCam-instrument-module-with-SW-and-LW-channels-POM-Pick-off-mirror_fig1_200142664"/>
</emissions>

  <camera>
    <slit_width val="4096" units="" comment="Size of slit image in units of detector pixels - if set to 0 then assumes no slit used"/>
    <dispersion path="__path__/data/JWST/NIRCam/Wavelengths/NIRCam_F444W_GRISM_dispersion.csv" val="4680" units="micron" comment="Dispersion law. Val is the reference pixel, i.e. the centre of the array"/>
    <wfno_x val="9.29" units="" comment="Image space f/# based on average of FHWM/lambda/1.02 above 2.4 microns Table1 https://jwst-docs.stsci.edu/display/JTI/NIRCam+Point+Spread+Functions" />
    <wfno_y val="9.29" units="" comment="as above" />
  </camera>

  <simulation_factors>
      <osf val="3" units="" comment="Oversample each detector pixel by this amount. Need to be changed" />
      <pix_offs val="1" units = "" comment="Detector pixel center offset" />
  </simulation_factors>
      
  <detector_array>
    <subarray_list val="SUBGRISM_64_1_output SUBGRISM_64_4_output SUBGRISM_128_1_output SUBGRISM_128_4_output SUBGRISM_256_1_output SUBGRISM_256_4_output FULL_1_output FULL_4_output" units= "" comment=""/>
    <subarray_geometry_list val="64,2048 64,2048 128,2048 128,2048 256,2048 256,2048 2048,2048 2048,2048" units= "" comment=""/>
    <subarray_t_f_list val="1.35960 0.34061 2.67800 0.67597 5.31480 1.34669 42.23000 10.73677" units= "s" comment=""/>
    <array_geometry val="64,2048" units= "dimensionless" comment="Default SUBGRISM_64 subarray mode"/>
    <qe val="__path__/data/JWST/NIRCam/Transmissions/NIRCam_LW_QE.csv" comment="" />
    <qe_rms_matrix_file val = "None" comment="[Default 'None'] Path to CSV file containing matrix of QE of pixels."/>
    <PRNU val="3.0" comment="flat field variation % rms" />
    <flat_field_uncert val="0.5" comment="flat field uncertainty % rms" />
  </detector_array>

  <detector_pixel>
    <pixel_size val="18" units="micron" />
    <plate_scale_x val="0.0000175" units="deg" comment="based on published 0.063 arcsec/pix https://jwst-docs.stsci.edu/display/JTI/NIRCam+Detectors" />
    <plate_scale_y val="0.0000175" units="deg" comment="based on published 0.063 arcsec/pix https://jwst-docs.stsci.edu/display/JTI/NIRCam+Detectors" />
    <Idc val="0.027" units="electron/s" comment="e/s https://jwst-docs.stsci.edu/display/JTI/NIRCam+Detector+Performance"/>
    <sigma_ro val="9.546" units="" comment="e https://jwst-docs.stsci.edu/display/JTI/NIRCam+Detector+Performance"/>
    <pixel_diffusion_length val="1e-30" units="micron" />
    <full_well val="83300" units="" comment="https://jwst-docs.stsci.edu/display/JTI/NIRCam+Detector+Performance"/>
    <pedestal_drift val="" units="" />
    <kTC_noise val="35" units="" comment="https://jwst-docs.stsci.edu/display/JTI/NIRCam+Detector+Performance"/>
  </detector_pixel>
  
  <detector_readout>
    <frame_time val="10.73677" units= "s" comment="time resolution of simulation"/>
    <t_f val="10.73677" units= "s" comment="integration time of a single frame"/>
    <t_g val="10.73677" units= "s" comment="integration time of a single group"/>
    <t_sim val="10.73677" units= "s" comment="integration time of a single group"/>
      
    <auto val="1" units= "" comment="will automatically set the dead time based on the group time"/>
    <multiaccum val="55" units= "" comment="number of groups in a ramp; aka MULTIACCUM"/>
    <doCDS val="1" units="" comment="0 = up-the-ramp, 1= CDS.  If pick CDS then final integration time will be (n-_groups-1)*array_readtime and only first and last NDR are simulated"/>
    <use_sat val="0" units="" comment="if true calculates minimum saturation time of a pixel and sets that as the exposure time" />
    <pc_fw val="80.0" units="" comment="maximum percent of full well to which any pixel can reach" />
    <exposure_time val="88.08" units="s" comment="time for one exposure containg set of NDRs and includes dead time if use_sat is false - however this is not implemented as it will conflict with frame_time and multiaccum.  Instead the expsoure time is calculated by multiaccum*frame_time +dead time" />
    <nGND val='0' units="" comment="duration of reset event in units of frame time" />
    <nNDR0 val='1' units="" comment="Integration time of zeroth NDR in units of frame time" />
    <nRST val = '1' units="" comment="Time lapse between last NDR and reset in units of frame time" />
    
  </detector_readout>
  
  <data_pipeline>
      <start_wav val="3.8" units="" />
      <end_wav val="5.1" units="" />
      <extra_pix val="0" units="" />
      <wavrange_lo val="3.9" units="" />
      <wavrange_hi val="5.0" units="" />
      <binning val="R-bin" units="" comment="either fixed-bin  or R-bin"/>
      <R val="100.0" units="" comment="based on average R in Pandexo paper"/>
      <bin_size val="5" units="" comment="size of fixed-bins in pixel columns if fixed-bin selected"/>
      <apply_mask val="0" units="" comment="apply an aperture mask or not"/>
      <ApFactor val="1.22" units="" comment="if mask applied, width in units of Flambda"/>
      <ApShape val="rect" units="" comment="rect = rectangular mask where width = ApFactor*F*lambda(max), wav = wavelength dependent mask where width = ApFactor * F *lambda. rect is default"/>
      <result_type val="0" units="" comment="0= SNR results, 1= planet spectrum with error bars"/>
      <useAllen val="0" units="" comment="if result_type is 0, this selects use of Allen analysis"/>
      <useReduced val="0" units="" comment="selects reduced number of bins in data pipline for speed "/>
      <jitterMethod val="pointing-interp" units="" comment=""/>
      <fit_gamma val="0" units="" comment=""/>
      <useSignal val="1" units="" comment=""/>
      <use_fast val="0" units="" comment="uses cropped arrays that reduce simulation and pipeline time"/>
      <auto_ap val="1" units="" comment=""/>
  </data_pipeline>
</channel>



</root>
